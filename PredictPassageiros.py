# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19f3XEByXDgiD1ShjxEScRfXt4FtqSMdL
"""

import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

passageiros = pd.read_csv('Passageiros.csv')
passageiros.head()

mpl.rcParams['figure.figsize'] = (10,6)
mpl.rcParams['font.size'] = 22
sns.lineplot(x='tempo', y="passageiros", data=passageiros, label='dado_completo')

sc = StandardScaler()
sc.fit(passageiros)

dado_escalado = sc.transform(passageiros)

x = dado_escalado[:,0]
y = dado_escalado[:,1]

sns.lineplot(x=x, y=y, label='Dado_Escalado')
plt.ylabel("Passageios")
plt.xlabel('Data')

tamanho_treino = int(len(passageiros)*0.9)
tamanho_teste = len(passageiros)-tamanho_treino

xtreino = x[0:tamanho_treino]
ytreino = y[0:tamanho_treino]

xteste = x[tamanho_treino:len(passageiros)]
yteste = y[tamanho_treino:len(passageiros)]

sns.lineplot(x=xtreino,y=ytreino,label='treino')
sns.lineplot(x=xteste, y=yteste, label='teste')
plt.ylabel("Passageios")
plt.xlabel('Data')

regressor = Sequential()
regressor.add(Dense(1,input_dim=1,kernel_initializer='Ones',use_bias=False))
regressor.compile(loss='mean_squared_error',optimizer='adam')
regressor.summary()

regressor.fit(xtreino,ytreino, epochs=20)

y_predict = regressor.predict(xtreino)
sns.lineplot(x=xtreino,y=ytreino,label='Trino')
sns.lineplot(x=xtreino,y=y_predict[:,0],label='Ajuste_Treino')

d = {'tempo': xtreino, 'passageiros': y_predict[:,0]}
resultados = pd.DataFrame(data=d)
print(resultados)

resultado_transf = sc.inverse_transform(resultados)
resultado_transf = pd.DataFrame(resultado_transf)
resultado_transf.columns = ['tempo','passageiros']

sns.lineplot(x='tempo',y='passageiros',data=passageiros, label='dado_completo')
sns.lineplot(x='tempo',y='passageiros',data=resultado_transf, label='Ajuste_Treno')

y_predict_teste = regressor.predict(xteste)
d = {'tempo': xteste, 'passageiros': y_predict_teste[:,0]}
resultados_teste = pd.DataFrame(data=d)
resultado_transf_teste = sc.inverse_transform(resultados_teste)

resultado_transf_teste = pd.DataFrame(resultado_transf_teste)
resultado_transf_teste.columns = ['tempo', 'passageiros']

sns.lineplot(x='tempo',y='passageiros',data=passageiros, label='dado_completo')
sns.lineplot(x='tempo',y='passageiros',data=resultado_transf, label='Ajuste_Treno')
sns.lineplot(x='tempo', y='passageiros',data=resultado_transf_teste, label='previs達o')

regressor2 = Sequential()

regressor2.add(Dense(8,input_dim=1,
               kernel_initializer='random_uniform',
               activation='sigmoid',
               use_bias=False))


regressor2.add(Dense(1,
                     kernel_initializer='random_uniform',
                     activation='sigmoid',
                     use_bias=False))

regressor2.compile(loss='mean_squared_error', optimizer='adam')

regressor2.summary()

regressor2.fit(xtreino,ytreino, epochs=500)

y_predict = regressor2.predict(xtreino)
y_predict_teste = regressor2.predict(xteste)

sns.lineplot(x=xtreino, y=ytreino, label='treino')
sns.lineplot(x=xteste, y=yteste, label='teste')
sns.lineplot(x=xtreino,y=y_predict[:,0],label='ajuste_treino')
sns.lineplot(x=xteste,y=y_predict_teste[:,0],label='previs達o')

vetor = pd.DataFrame(ytreino)[0]

def separa_dados(vetor, n_passos):
  x_novo,y_novo = [], []

  for i in range(n_passos, vetor.shape[0]):
    x_novo.append(list(vetor.loc[i-n_passos:i-1]))
    y_novo.append(vetor.loc[i])
  X_novo, y_novo = np.array(x_novo), np.array(y_novo)
  return x_novo, y_novo


xtreino_novo, ytreino_novo = separa_dados(vetor, 1)
xtreino_novo[0:5]

ytreino_novo[0:5]

vetor2 = pd.DataFrame(yteste)[0]

xteste_novo, yteste_novo = separa_dados(vetor2,1)

regressor3 = Sequential()
regressor3.add(Dense(8, input_dim=1,
                     kernel_initializer='Ones',
                     activation="linear",
                     use_bias=False))
regressor3.add(Dense(64,
                     kernel_initializer='random_uniform',
                     activation='sigmoid',
                     use_bias=False))
regressor3.add(Dense(1,
                     kernel_initializer='random_uniform',
                     activation='linear',
                     use_bias=False))

regressor3.compile(loss='mean_squared_error', optimizer='adam')

xtreino_novo = np.array(xtreino_novo)
ytreino_novo = np.array(ytreino_novo)
regressor3.fit(xtreino_novo,ytreino_novo, epochs=100)

y_predict_novo = regressor3.predict(xtreino_novo)
sns.lineplot(x='tempo', y=ytreino_novo, data=passageiros[1:129], label='Treino')
sns.lineplot(x='tempo', y=pd.DataFrame(y_predict_novo)[0], data=passageiros[1:129], label='ajuste_treino')

resultado = pd.DataFrame(y_predict_teste_novo)[0]

y_predict_teste_novo = regressor3.predict(xteste_novo)
sns.lineplot(x='tempo', y=ytreino_novo, data=passageiros[1:129], label='Treino')
sns.lineplot(x='tempo', y=pd.DataFrame(y_predict_novo)[0], data=passageiros[1:129], label='ajuste_treino')
sns.lineplot(x='tempo', y=yteste_novo, data=passageiros[130:144], label='teste')
sns.lineplot(x='tempo', y=resultado, data=passageiros[130:144], label='previs達o')

xtreino_novo, ytreino_novo = separa_dados(vetor,4)
xtreino_novo[0:5]

ytreino_novo[0:5]

xteste_novo, yteste_novo = separa_dados(vetor2, 4)

regressor4 = Sequential()
regressor4.add(Dense(8, input_dim=4,
                     kernel_initializer='ones',
                     activation='linear',
                     use_bias=False))
regressor4.add(Dense(64,
                     kernel_initializer='random_uniform',
                     activation='sigmoid',
                     use_bias=False))
regressor4.add(Dense(1,
                     kernel_initializer='random_uniform',
                     activation='linear',
                     use_bias=False))

regressor4.compile(loss='mean_squared_error', optimizer='adam')

xtreino_novo = np.array(xtreino_novo)
ytreino_novo = np.array(ytreino_novo)
regressor4.fit(xtreino_novo,ytreino_novo,epochs=300)

y_predict_novo = regressor4.predict(xtreino_novo)
y_predict_teste_novo = regressor4.predict(xteste_novo)
resultado_treino = pd.DataFrame(y_predict_novo)[0]
resultado = pd.DataFrame(y_predict_teste_novo)[0]

sns.lineplot(x='tempo', y=ytreino_novo, data=passageiros[4:129], label='treino')
sns.lineplot(x='tempo', y=resultado_treino.values, data=passageiros[4:129], label='ajuste_treino')
sns.lineplot(x='tempo', y=yteste_novo, data=passageiros[133:144], label='teste')
sns.lineplot(x='tempo', y=resultado.values, data=passageiros[133:144], label='previs達o')

